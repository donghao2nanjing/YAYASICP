#lang sicp 

(define (variable? e)
    (symbol? e)
)

(define (=number? e n) 
    (if (number? e) (= e n) #f)
)
(define (same-variable? v1 v2)
    (and (variable? v1) (variable? v2) (eq? v1 v2))
)
(define (sum? e)
    (and (pair? e) (eq? (car e) '+))
)
(define (addend e) (cadr e))
(define (augend e)
    (if (null? (cdddr e)) (caddr e)
    (make-sum (caddr e) (augend (cdr e))))
)
(define (make-sum a1 a2) 
    (cond 
        ((=number? a1 0) a2 )
        ((=number? a2 0) a1 )
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else (list '+ a1 a2)))
)

(define (product? e) (and (pair? e) (eq? (car e) '*)))
(define (multiplier e) (cadr e))
(define (multiplicand e) 
    (if (null? (cdddr e)) (caddr e)
    (make-product (caddr e) (multiplicand (cdr e)))
    )
)
(define (make-product m1 m2) 
    (cond 
        ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        (else (list '* m1 m2))
    )
)
(define (make-exponentiation base exp) 
    (cond
        ((=number? base 1) 1)
        ((=number? exp 0) 1)
        (else (list '** base exp))    
    )
)
(define (power? e) (and (pair? e) (eq? (car e) '**)))
(define (pow-base e) (cadr e))
(define (pow-exp e) (caddr e))

(define (deriv exp var)
    (cond ((number? exp) 0)
        ((variable? exp) (if (same-variable? exp var) 1 0))
        ((sum? exp) (make-sum (deriv (addend exp) var) (deriv (augend exp) var)))
        ((product? exp) (make-sum
            (make-product (multiplier exp) (deriv (multiplicand exp) var))
            (make-product (deriv (multiplier exp) var) (multiplicand exp))
        ))
        ((power? exp) (make-product
            (pow-exp exp)
            (make-product 
                (make-exponentiation (pow-base exp) (- (pow-exp exp) 1))
                (deriv (pow-base exp) var)
            )
        ))
        (else (error "Unknown expression type: DERIV" exp))
    )
)

(deriv '(+ x 3) 'x)
(deriv '(* x y) 'x)
(deriv '(** x 6) 'x)
(deriv '(* x y (+ x 3)) 'x)
